// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Sigav.Api.Data;

#nullable disable

namespace Sigav.Api.Migrations
{
    [DbContext(typeof(SigavDbContext))]
    partial class SigavDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Sigav.Domain.AuthLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("FechaActualizacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.Property<string>("Jti")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Tenant")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserAgent")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("UsernameAttempted")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("Result");

                    b.HasIndex("Tenant");

                    b.HasIndex("Timestamp");

                    b.HasIndex("UserId");

                    b.HasIndex("IpAddress", "Timestamp");

                    b.HasIndex("Tenant", "Result");

                    b.HasIndex("Tenant", "Timestamp");

                    b.ToTable("AuthLogs");
                });

            modelBuilder.Entity("Sigav.Domain.Buseta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean");

                    b.Property<int>("Ano")
                        .HasColumnType("integer");

                    b.Property<int>("Capacidad")
                        .HasColumnType("integer");

                    b.Property<string>("Color")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Combustible")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal?>("ConsumoPromedio")
                        .HasColumnType("numeric");

                    b.Property<int>("EmpresaId")
                        .HasColumnType("integer");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("FechaActualizacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("Kilometraje")
                        .HasColumnType("integer");

                    b.Property<string>("Marca")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Modelo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("NumeroChasis")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("NumeroMotor")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Observaciones")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Placa")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("ProximaRevision")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("UltimaRevision")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("EmpresaId");

                    b.HasIndex("Estado");

                    b.HasIndex("Marca");

                    b.HasIndex("Placa")
                        .IsUnique();

                    b.HasIndex("ProximaRevision");

                    b.HasIndex("UltimaRevision");

                    b.HasIndex("EmpresaId", "Activo");

                    b.HasIndex("Estado", "Activo");

                    b.HasIndex("EmpresaId", "Estado", "Activo");

                    b.ToTable("Busetas");
                });

            modelBuilder.Entity("Sigav.Domain.ChecklistEjecucion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean");

                    b.Property<int>("BusetaId")
                        .HasColumnType("integer");

                    b.Property<int>("ChecklistPlantillaId")
                        .HasColumnType("integer");

                    b.Property<bool>("Completado")
                        .HasColumnType("boolean");

                    b.Property<string>("CondicionesClimaticas")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("FechaActualizacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("FechaFin")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("InspectorId")
                        .HasColumnType("integer");

                    b.Property<string>("ObservacionesGenerales")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int?>("TiempoTotal")
                        .HasColumnType("integer");

                    b.Property<string>("Ubicacion")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("BusetaId");

                    b.HasIndex("ChecklistPlantillaId");

                    b.HasIndex("Estado");

                    b.HasIndex("FechaInicio");

                    b.HasIndex("InspectorId");

                    b.HasIndex("BusetaId", "FechaInicio");

                    b.HasIndex("Estado", "FechaInicio");

                    b.HasIndex("InspectorId", "FechaInicio");

                    b.ToTable("ChecklistEjecuciones");
                });

            modelBuilder.Entity("Sigav.Domain.ChecklistItemPlantilla", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean");

                    b.Property<string>("Categoria")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("ChecklistPlantillaId")
                        .HasColumnType("integer");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime?>("FechaActualizacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<bool>("Obligatorio")
                        .HasColumnType("boolean");

                    b.Property<string>("Opciones")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("Orden")
                        .HasColumnType("integer");

                    b.Property<bool>("PermiteObservacion")
                        .HasColumnType("boolean");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("ChecklistPlantillaId");

                    b.HasIndex("ChecklistPlantillaId", "Orden");

                    b.ToTable("ChecklistItemPlantillas");
                });

            modelBuilder.Entity("Sigav.Domain.ChecklistItemResultado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean");

                    b.Property<bool?>("Aprobado")
                        .HasColumnType("boolean");

                    b.Property<int>("ChecklistEjecucionId")
                        .HasColumnType("integer");

                    b.Property<int>("ChecklistItemPlantillaId")
                        .HasColumnType("integer");

                    b.Property<string>("Evidencia")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("FechaActualizacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaVerificacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Observacion")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Resultado")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Valor")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("ChecklistEjecucionId");

                    b.HasIndex("ChecklistItemPlantillaId");

                    b.HasIndex("FechaVerificacion");

                    b.HasIndex("Resultado");

                    b.HasIndex("ChecklistEjecucionId", "Resultado");

                    b.ToTable("ChecklistItemResultados");
                });

            modelBuilder.Entity("Sigav.Domain.ChecklistPlantilla", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activa")
                        .HasColumnType("boolean");

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("EmpresaId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("FechaActualizacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int?>("TiempoEstimado")
                        .HasColumnType("integer");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("EmpresaId");

                    b.HasIndex("Tipo");

                    b.HasIndex("EmpresaId", "Activa");

                    b.HasIndex("EmpresaId", "Tipo");

                    b.ToTable("ChecklistPlantillas");
                });

            modelBuilder.Entity("Sigav.Domain.CustomField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("EmpresaId")
                        .HasColumnType("integer");

                    b.Property<string>("Entidad")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("FechaActualizacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Opciones")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("Orden")
                        .HasColumnType("integer");

                    b.Property<bool>("Requerido")
                        .HasColumnType("boolean");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("EmpresaId");

                    b.HasIndex("Entidad");

                    b.HasIndex("EmpresaId", "Entidad");

                    b.HasIndex("EmpresaId", "Entidad", "Activo");

                    b.ToTable("CustomFields");
                });

            modelBuilder.Entity("Sigav.Domain.CustomFieldValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean");

                    b.Property<int?>("BusetaId")
                        .HasColumnType("integer");

                    b.Property<int?>("ChecklistEjecucionId")
                        .HasColumnType("integer");

                    b.Property<int?>("ChecklistPlantillaId")
                        .HasColumnType("integer");

                    b.Property<int>("CustomFieldId")
                        .HasColumnType("integer");

                    b.Property<string>("Entidad")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("EntidadId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("FechaActualizacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("UsuarioId")
                        .HasColumnType("integer");

                    b.Property<string>("Valor")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.HasKey("Id");

                    b.HasIndex("BusetaId");

                    b.HasIndex("ChecklistEjecucionId");

                    b.HasIndex("ChecklistPlantillaId");

                    b.HasIndex("CustomFieldId");

                    b.HasIndex("Entidad");

                    b.HasIndex("EntidadId");

                    b.HasIndex("UsuarioId");

                    b.HasIndex("Entidad", "EntidadId");

                    b.HasIndex("CustomFieldId", "Entidad", "EntidadId");

                    b.ToTable("CustomFieldValues");
                });

            modelBuilder.Entity("Sigav.Domain.Empresa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Direccion")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("FechaActualizacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("text");

                    b.Property<string>("Nit")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("SitioWeb")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Telefono")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("Activo");

                    b.HasIndex("Nit")
                        .IsUnique();

                    b.HasIndex("Activo", "FechaCreacion");

                    b.ToTable("Empresas");
                });

            modelBuilder.Entity("Sigav.Domain.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean");

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Cargo")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Departamento")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Documento")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("EmpresaId")
                        .HasColumnType("integer");

                    b.Property<int>("FailedAttempts")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("FechaActualizacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("FechaContratacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("FechaNacimiento")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LockedUntil")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Rol")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal?>("Salario")
                        .HasColumnType("numeric");

                    b.Property<string>("Telefono")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("TipoDocumento")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("EmpresaId");

                    b.HasIndex("Rol");

                    b.HasIndex("EmpresaId", "Activo");

                    b.HasIndex("Rol", "Activo");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("Sigav.Domain.Buseta", b =>
                {
                    b.HasOne("Sigav.Domain.Empresa", "Empresa")
                        .WithMany("Busetas")
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Empresa");
                });

            modelBuilder.Entity("Sigav.Domain.ChecklistEjecucion", b =>
                {
                    b.HasOne("Sigav.Domain.Buseta", "Buseta")
                        .WithMany()
                        .HasForeignKey("BusetaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sigav.Domain.ChecklistPlantilla", "ChecklistPlantilla")
                        .WithMany()
                        .HasForeignKey("ChecklistPlantillaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sigav.Domain.Usuario", "Inspector")
                        .WithMany()
                        .HasForeignKey("InspectorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Buseta");

                    b.Navigation("ChecklistPlantilla");

                    b.Navigation("Inspector");
                });

            modelBuilder.Entity("Sigav.Domain.ChecklistItemPlantilla", b =>
                {
                    b.HasOne("Sigav.Domain.ChecklistPlantilla", "ChecklistPlantilla")
                        .WithMany("Items")
                        .HasForeignKey("ChecklistPlantillaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChecklistPlantilla");
                });

            modelBuilder.Entity("Sigav.Domain.ChecklistItemResultado", b =>
                {
                    b.HasOne("Sigav.Domain.ChecklistEjecucion", "ChecklistEjecucion")
                        .WithMany("ItemsResultado")
                        .HasForeignKey("ChecklistEjecucionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sigav.Domain.ChecklistItemPlantilla", "ChecklistItemPlantilla")
                        .WithMany()
                        .HasForeignKey("ChecklistItemPlantillaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ChecklistEjecucion");

                    b.Navigation("ChecklistItemPlantilla");
                });

            modelBuilder.Entity("Sigav.Domain.ChecklistPlantilla", b =>
                {
                    b.HasOne("Sigav.Domain.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Empresa");
                });

            modelBuilder.Entity("Sigav.Domain.CustomField", b =>
                {
                    b.HasOne("Sigav.Domain.Empresa", "Empresa")
                        .WithMany("CustomFields")
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Empresa");
                });

            modelBuilder.Entity("Sigav.Domain.CustomFieldValue", b =>
                {
                    b.HasOne("Sigav.Domain.Buseta", null)
                        .WithMany("CustomFieldValues")
                        .HasForeignKey("BusetaId");

                    b.HasOne("Sigav.Domain.ChecklistEjecucion", null)
                        .WithMany("CustomFieldValues")
                        .HasForeignKey("ChecklistEjecucionId");

                    b.HasOne("Sigav.Domain.ChecklistPlantilla", null)
                        .WithMany("CustomFieldValues")
                        .HasForeignKey("ChecklistPlantillaId");

                    b.HasOne("Sigav.Domain.CustomField", "CustomField")
                        .WithMany()
                        .HasForeignKey("CustomFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sigav.Domain.Usuario", null)
                        .WithMany("CustomFieldValues")
                        .HasForeignKey("UsuarioId");

                    b.Navigation("CustomField");
                });

            modelBuilder.Entity("Sigav.Domain.Usuario", b =>
                {
                    b.HasOne("Sigav.Domain.Empresa", "Empresa")
                        .WithMany("Usuarios")
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Empresa");
                });

            modelBuilder.Entity("Sigav.Domain.Buseta", b =>
                {
                    b.Navigation("CustomFieldValues");
                });

            modelBuilder.Entity("Sigav.Domain.ChecklistEjecucion", b =>
                {
                    b.Navigation("CustomFieldValues");

                    b.Navigation("ItemsResultado");
                });

            modelBuilder.Entity("Sigav.Domain.ChecklistPlantilla", b =>
                {
                    b.Navigation("CustomFieldValues");

                    b.Navigation("Items");
                });

            modelBuilder.Entity("Sigav.Domain.Empresa", b =>
                {
                    b.Navigation("Busetas");

                    b.Navigation("CustomFields");

                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("Sigav.Domain.Usuario", b =>
                {
                    b.Navigation("CustomFieldValues");
                });
#pragma warning restore 612, 618
        }
    }
}
