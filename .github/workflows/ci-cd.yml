name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  DOTNET_VERSION: '8.0.x'
  NODE_VERSION: '22.x'

jobs:
  # Job de análisis de código y seguridad
  code-analysis:
    name: Code Analysis & Security
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Install dependencies
      run: |
        dotnet restore backend/Sigav.Api/Sigav.Api.csproj
        cd frontend && npm ci
        
    - name: Run security scan
      uses: snyk/actions/dotnet@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high
        
    - name: Run SonarQube analysis
      uses: sonarqube-quality-gate-action@master
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        scannerHome: ${{ github.workspace }}/.sonar/scanner
        args: >
          -Dsonar.projectKey=sigav
          -Dsonar.sources=backend
          -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }}

  # Job de tests backend
  test-backend:
    name: Backend Tests
    runs-on: ubuntu-latest
    needs: code-analysis
    
    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: sigav_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
      redis:
        image: redis:8
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore backend/Sigav.Api/Sigav.Api.csproj
      
    - name: Build
      run: dotnet build backend/Sigav.Api/Sigav.Api.csproj --no-restore
      
    - name: Run unit tests
      run: |
        dotnet test backend/Sigav.Tests/Sigav.Tests.csproj \
          --no-build \
          --verbosity normal \
          --collect:"XPlat Code Coverage" \
          --results-directory ./coverage
          
    - name: Run integration tests
      run: |
        dotnet test backend/Sigav.Tests/Sigav.Tests.csproj \
          --filter "Category=Integration" \
          --no-build \
          --verbosity normal
          
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/coverage.cobertura.xml
        flags: backend
        name: backend-coverage

  # Job de tests frontend
  test-frontend:
    name: Frontend Tests
    runs-on: ubuntu-latest
    needs: code-analysis
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install dependencies
      working-directory: frontend
      run: npm ci
      
    - name: Run linting
      working-directory: frontend
      run: npm run lint
      
    - name: Run unit tests
      working-directory: frontend
      run: npm run test:ci
      
    - name: Run e2e tests
      working-directory: frontend
      run: npm run e2e:ci
      env:
        CI: true

  # Job de build y artefactos
  build:
    name: Build & Package
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Build backend
      run: |
        dotnet publish backend/Sigav.Api/Sigav.Api.csproj \
          -c Release \
          -o ./artifacts/backend
          
    - name: Build frontend
      working-directory: frontend
      run: |
        npm ci
        npm run build:prod
        
    - name: Create Docker images
      run: |
        docker build -f Dockerfile.api -t sigav-api:${{ github.sha }} .
        docker build -f Dockerfile.frontend -t sigav-frontend:${{ github.sha }} .
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: sigav-artifacts
        path: |
          ./artifacts/
          ./frontend/dist/

  # Job de deployment a staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to Azure Container Instances
      uses: azure/aci-deploy@v1
      with:
        resource-group: ${{ secrets.AZURE_RESOURCE_GROUP }}
        dns-name-label: sigav-staging-${{ github.sha }}
        location: 'East US'
        image: sigav-api:${{ github.sha }}
        registry-login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
        registry-username: ${{ secrets.REGISTRY_USERNAME }}
        registry-password: ${{ secrets.REGISTRY_PASSWORD }}
        environment-variables: |
          ASPNETCORE_ENVIRONMENT=Staging
          DATABASE_CONNECTION_STRING=${{ secrets.STAGING_DB_CONNECTION_STRING }}

  # Job de deployment a producción
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to Azure Container Instances
      uses: azure/aci-deploy@v1
      with:
        resource-group: ${{ secrets.AZURE_RESOURCE_GROUP }}
        dns-name-label: sigav-prod-${{ github.sha }}
        location: 'East US'
        image: sigav-api:${{ github.sha }}
        registry-login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
        registry-username: ${{ secrets.REGISTRY_USERNAME }}
        registry-password: ${{ secrets.REGISTRY_PASSWORD }}
        environment-variables: |
          ASPNETCORE_ENVIRONMENT=Production
          DATABASE_CONNECTION_STRING=${{ secrets.PROD_DB_CONNECTION_STRING }}
          
    - name: Run smoke tests
      run: |
        # Esperar a que la aplicación esté lista
        sleep 30
        # Ejecutar tests de humo
        curl -f http://sigav-prod-${{ github.sha }}.eastus.azurecontainer.io/health
